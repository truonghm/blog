<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Truong Hoang</title>
<link>https://truonghm.github.io/blog/</link>
<atom:link href="https://truonghm.github.io/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>TruongHM&#39;s homepage</description>
<generator>quarto-1.6.40</generator>
<lastBuildDate>Mon, 20 Jan 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>Transitioning from pip to uv</title>
  <dc:creator>Truong Hoang</dc:creator>
  <link>https://truonghm.github.io/blog/posts/pip-uv-transition/</link>
  <description><![CDATA[ 





<p>In this post, I will share my experience with transitioning from <code>pip</code> / older <code>uv</code> APIs to the new <code>uv</code> APIs.</p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p><code>uv</code> is the new kid on the Python package manager block and it’s been making waves. It’s self-described as “an extremely fast Python package and project manager, written in Rust”. The benchmark results are impressive:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://truonghm.github.io/blog/posts/pip-uv-transition/images/2025-01-20-11-42-45.png" class="img-fluid quarto-figure quarto-figure-center figure-img" alt="uv benchmark"></p>
</figure>
</div>
<p>I started incorporating <code>uv</code> into the workflow of my Python projects back in early 2024, when it was still version 0.2.x. Back then, <code>uv</code> adopted the <code>pip-tools</code> API and aimed to be a drop-in replacement for <code>pip-tools</code>, which was actually what we were using at the time. The transition was smooth and we didn’t have to change much in our workflow. However, we were also aware of the various limitations of <code>pip-tools</code>, such as having to manage separate <code>requirements.txt</code> and <code>requirements-dev.txt</code> files, which sometimes led to inconsistencies between the two. Thankfully, recent versions of <code>uv</code> have added a new set of uv-native APIs that use a single lockfile in TOML format, which makes packaging and sharing dependencies much easier. In this post, I will share my experience with transitioning from <code>pip</code> / older <code>uv</code> APIs to the new <code>uv</code> APIs.</p>
</section>
<section id="moving-dependencies-from-requirements.txt-to-uv.lock" class="level1">
<h1>Moving dependencies from <code>requirements.txt</code> to <code>uv.lock</code></h1>
<p>The first step in transitioning to the new <code>uv</code> APIs is to move your dependencies from <code>requirements.txt</code> to <code>uv.lock</code>. I want to keep the versions between the old requirements file and the new lockfile as similar as possible, while also making sure that both dev and non-dev dependencies are included in the lockfile. In order to achieve that, we first need to generate a new lockfile using the <code>uv</code> CLI.</p>
<p>Assume that a <code>pyproject.toml</code> file exists in the current project, we can generate a new lockfile by running the following command:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> lock</span></code></pre></div>
<p>This will generate a new lockfile in the current directory. This lockfile most probably will contain different versions of the same package, especially if the top-level packages in <code>pyproject.toml</code> are unconstrained (i.e.&nbsp;not pinned). To compare the versions between the old requirements file and the new lockfile, we can write a simple Python script that reads both files and compares the versions of the packages.</p>
<p>First, let’s create a function to compare the versions:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-4"></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> compare_version(lockfile: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, requirements: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> pd.DataFrame:</span>
<span id="cb2-7">    lockfile_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(lockfile)</span>
<span id="cb2-8">    requirements_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(requirements)</span>
<span id="cb2-9"></span>
<span id="cb2-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> lockfile_path.exists():</span>
<span id="cb2-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">FileNotFoundError</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Lockfile </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>lockfile<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> not found"</span>)</span>
<span id="cb2-12"></span>
<span id="cb2-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> requirements_path.exists():</span>
<span id="cb2-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">FileNotFoundError</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Requirements file </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>requirements<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> not found"</span>)</span>
<span id="cb2-15"></span>
<span id="cb2-16">    lockfile_packages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(lockfile_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-18">        lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.readlines()</span>
<span id="cb2-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(lines):</span>
<span id="cb2-20">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> line.strip().startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name = "</span>):</span>
<span id="cb2-21">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> lines[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].strip() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[[package]]"</span>:</span>
<span id="cb2-22">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(lines) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> lines[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].strip().startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"version = "</span>):</span>
<span id="cb2-23">                        name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"="</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].strip().strip(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"'</span>)</span>
<span id="cb2-24">                        version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lines[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"="</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].strip().strip(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"'</span>)</span>
<span id="cb2-25">                        lockfile_packages.append({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"version"</span>: version})</span>
<span id="cb2-26"></span>
<span id="cb2-27">    lockfile_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(lockfile_packages)</span>
<span id="cb2-28"></span>
<span id="cb2-29">    requirements_packages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(requirements_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-31">        lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.readlines()</span>
<span id="cb2-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lines:</span>
<span id="cb2-33">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> line.strip().startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> line.strip():</span>
<span id="cb2-34">                name, version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line.strip().split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"=="</span>)</span>
<span id="cb2-35">                requirements_packages.append({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"version"</span>: version})</span>
<span id="cb2-36"></span>
<span id="cb2-37">    requirements_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(requirements_packages)</span>
<span id="cb2-38"></span>
<span id="cb2-39">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.merge(lockfile_df, requirements_df, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outer"</span>, suffixes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_lockfile"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_requirements"</span>))</span>
<span id="cb2-40"></span>
<span id="cb2-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> df</span></code></pre></div>
<p>After that, a need that may arise is to “sync” the versions from the old requirements file to the new lockfile on a best-effort basis. This can be done by writing another function:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sync_to_lockfile(lockfile: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, df: pd.DataFrame) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb3-3">    lockfile_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(lockfile)</span>
<span id="cb3-4"></span>
<span id="cb3-5">    new_lockfile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb3-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(lockfile_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-7">        lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.readlines()</span>
<span id="cb3-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(lines):</span>
<span id="cb3-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb3-10">                new_lockfile.append(line)</span>
<span id="cb3-11">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> line.strip().startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"version = "</span>):</span>
<span id="cb3-12">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> lines[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].strip() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[[package]]"</span>:</span>
<span id="cb3-13">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> lines[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].strip().startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name = "</span>):</span>
<span id="cb3-14">                        name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lines[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"="</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].strip().strip(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"'</span>)</span>
<span id="cb3-15">                        new_version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name == @name"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"version_requirements"</span>].values[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-16">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> new_version <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(new_version) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nan"</span>:</span>
<span id="cb3-17">                            new_lockfile.append(line)</span>
<span id="cb3-18">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-19">                            new_lockfile.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'version = "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>new_version<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb3-20">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-21">                new_lockfile.append(line)</span>
<span id="cb3-22"></span>
<span id="cb3-23">    lockfile_path.rename(lockfile_path.parent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>lockfile_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>stem<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_old</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>lockfile_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>suffix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-24">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Old lockfile renamed to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>lockfile_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>parent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>lockfile_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>stem<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_old</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>lockfile_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>suffix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(lockfile_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-26">        f.writelines(new_lockfile)</span>
<span id="cb3-27">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"New lockfile saved to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>lockfile_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<p>Finally, we can put it all together:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb4-2">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> argparse</span>
<span id="cb4-3"></span>
<span id="cb4-4">    parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> argparse.ArgumentParser(description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Compare two versions of a lockfile and requirements file"</span>)</span>
<span id="cb4-5">    parser.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--lockfile"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">help</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Path to the lockfile"</span>)</span>
<span id="cb4-6">    parser.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--requirements"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">help</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Path to the requirements file"</span>)</span>
<span id="cb4-7">    parser.add_argument(</span>
<span id="cb4-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--sync-to-lockfile"</span>,</span>
<span id="cb4-9">        action<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>argparse.BooleanOptionalAction,</span>
<span id="cb4-10">        default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb4-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">help</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sync all versions from the requirements file to the lockfile"</span>,</span>
<span id="cb4-12">    )</span>
<span id="cb4-13">    args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parser.parse_args()</span>
<span id="cb4-14"></span>
<span id="cb4-15">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compare_version(args.lockfile, args.requirements)</span>
<span id="cb4-16">    diff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"version_lockfile != version_requirements"</span>)</span>
<span id="cb4-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(diff)</span>
<span id="cb4-18">    diff.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package_diff.csv"</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb4-19"></span>
<span id="cb4-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> args.sync_to_lockfile:</span>
<span id="cb4-21">        sync_to_lockfile(args.lockfile, df)</span></code></pre></div>
<p>This script can be run with <code>uv</code>, however we need to add a little section at the top of the script to specify <code>pandas</code> as a script-level dependency:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># /// script</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># requires-python = "&gt;=3.10"</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dependencies = [</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     "pandas",</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ]</span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ///</span></span></code></pre></div>
<p>Then running the script is trivial:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">`</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> run <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--python</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-project</span> scripts/compare_version.py <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--lockfile</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>./uv.lock <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--requirements</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>./requirements-dev.txt<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">`</span> </span></code></pre></div>
<p>This script will compare the versions between the old requirements file and the new lockfile, and save the differences to a CSV file. If the <code>--sync-to-lockfile</code> flag is set, it will also sync the versions from the old requirements file to the new lockfile.</p>
<p>To summarise, the workflow would be:</p>
<ol type="1">
<li><p>Generate a new lockfile using <code>uv lock</code></p></li>
<li><p>Run the script the first time to review the differences</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> run <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--python</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-project</span> scripts/compare_version.py <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--lockfile</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>./uv.lock <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--requirements</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>./requirements-dev.txt</span></code></pre></div></li>
<li><p>Run the script again, this time with the <code>--sync-to-lockfile</code> flag set to sync the versions from the old requirements file to the new lockfile</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> run <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--python</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-project</span> scripts/compare_version.py <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--lockfile</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>./uv.lock <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--requirements</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>./requirements-dev.txt <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--sync-to-lockfile</span></span></code></pre></div></li>
<li><p>Review the changes in the lockfile and run <code>uv sync</code> to both install the dependencies add see if <code>uv</code> detects any issues or conflicts.</p></li>
</ol>
<p>For example, one of my projects generated the following output (project-name is a project I’m working on):</p>
<pre><code>                   name version_lockfile version_requirements
6               appnope            0.1.4                  NaN
18   clickhouse-connect           0.8.14                  NaN
19    clickhouse-driver            0.2.9                  NaN
20             colorama            0.4.6                  NaN
59                  lz4            4.3.3                  NaN
108             pywin32              308                  NaN
109        project-name            0.0.1                  NaN
159             tzlocal              5.2                  NaN
168           zstandard           0.23.0                  NaN</code></pre>
<p>The entire script is available <a href="https://gist.github.com/truonghm/cc679834d2d8a67ba16e3abdda981812">here</a>. Feel free to use it or provide feedback on how to improve it.</p>
</section>
<section id="updating-your-dockerfile" class="level1">
<h1>Updating your Dockerfile</h1>
<p>If you are using Docker to build your project, you will need to update your Dockerfile to use <code>uv</code> instead of <code>pip</code> to make full use of the new lockfile. There have been multiple examples of this (<code>uv</code> also provies <a href="https://docs.astral.sh/uv/guides/integration/docker/">an official guide in their docs</a>), but I’ve found that <a href="https://hynek.me/articles/docker-uv/">this article</a> by <a href="https://hynek.me">Hynek Schlawack</a> works best for me. For a quick reference, here is an example of a Dockerfile that uses <code>uv</code>:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> python:3.10 as build</span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--from=ghcr.io/astral-sh/uv:0.4.22</span> /uv /bin/uv</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENV</span> UV_LINK_MODE=copy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb10-5">    UV_COMPILE_BYTECODE=1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb10-6">    UV_PYTHON_DOWNLOADS=never <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb10-7">    UV_PYTHON=python3.10 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb10-8">    UV_PROJECT_ENVIRONMENT=/app</span>
<span id="cb10-9"></span>
<span id="cb10-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> pyproject.toml /_lock/</span>
<span id="cb10-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> uv.lock /_lock/</span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">RUN</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--mount=type=cache,target=/root/.cache</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;EOT</span></span>
<span id="cb10-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">cd /_lock</span></span>
<span id="cb10-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">uv sync </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb10-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    --frozen </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb10-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    --no-dev </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb10-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    --no-install-project</span></span>
<span id="cb10-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">EOT</span></span>
<span id="cb10-20"></span>
<span id="cb10-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> python:3.10</span>
<span id="cb10-22"></span>
<span id="cb10-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--from=build</span> /app /app</span>
<span id="cb10-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">COPY</span> . /app</span>
<span id="cb10-25"></span>
<span id="cb10-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WORKDIR</span> /app</span>
<span id="cb10-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ENV</span> PATH=/app/bin:$PATH</span>
<span id="cb10-28"></span>
<span id="cb10-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">EXPOSE</span> 9000</span>
<span id="cb10-30"></span>
<span id="cb10-31"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CMD</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/app/bin/uvicorn"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"main:app"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--host"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.0.0.0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--port"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"9000"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--reload"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--workers"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4"</span>]</span></code></pre></div>
</section>
<section id="a-note-local-development-with-pre-commit" class="level1">
<h1>A note local development with pre-commit</h1>
<p>For local development, you can use <code>uv</code> with a workflow similar to <code>pipenv</code> or <code>poetry</code>. This has been documented very thoroughly by in the offical <code>uv</code> docs, so I won’t go into too much detail here. If you go through these documentation, you will see that one benefit of using <code>uv</code> most things can be run with either <code>uv run</code> or <code>uvx</code>, which is extremely convenient and makes the Python development exprience closer to that of <code>cargo</code> or <code>npm</code>.</p>
<p>However, at the moment, what I have found is that when making commits with <code>pre-commit</code>, your environment still must be activated:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">source</span> .venv/bin/activate</span></code></pre></div>
<p>This is kind of a bummer, but hopefully I might be wrong. Either way, I’m looking forward to seeing how <code>uv</code> develops in the future, particularly with its integration with other tools like <code>pre-commit</code>.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>code</category>
  <category>tricks</category>
  <guid>https://truonghm.github.io/blog/posts/pip-uv-transition/</guid>
  <pubDate>Mon, 20 Jan 2025 00:00:00 GMT</pubDate>
  <media:content url="https://truonghm.github.io/blog/posts/pip-uv-transition/image.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
